
import TokenType;
import Position;
import Token;
import language;

string getline( string text, int line );

let escaped_characters = setmetatable( {
	["n"] = "\n", ["0"] = "\0", ["r"] = "\r", ["t"] = "\t";
}, { __index = lambda _ char => "\\" >> char } );

class Lexer {
	int position = 1;
	string text = "";

	string source_name = "string";
	int character = 1;
	int line = 1;
	string strline = "";

	Token[] buffer;
	int buffer_position = 1;

	int[] mark_stack;
	int token_line;

	Token[]{string} macros;

	Lexer(string text, string source_name) {
		self.source_name = source_name;
		self.text = text;
		self.buffer = [];
		self.mark_stack = [];
		self.macros = {};
	}

	Position getPosition(null int n = 0);

	bool isEOF();

	void error(string err, null Position position = self:getPosition());

	Token consumePattern(TokenType type, string pattern);

	void consumeString(); // String, Character
	void consumeWord(); // Identifier, Keyword, Boolean
	void consumeNumber(); // Float, Integer, Byte
	void consumeHexadecimal(); // Hexadecimal
	void consumeBinary(); // Binary
	void consumeSymbol(); // Symbol

	void define_macro(string name, Token[] macro);

	void skipWhitespace();
	void skipComment();
	void skipNewline();
	void skipAllWhitespace();

	void consume();

	void mark();
	void back();
	void pop_mark();

	Token get();
	Token peek(null int lookahead = 1);
	Token next();

	bool next_same_line();

	Token test(TokenType type, null string value, null int lookahead);
	Token skip(TokenType type, null string value);

	string testValue(TokenType type, null string value, null int lookahead);
	string skipValue(TokenType type, null string value);

	Token test_line(TokenType type, null string value, null int lookahead);
	Token skip_line(TokenType type, null string value);
}
